// SIMULA√á√ÉO ESPEC√çFICA: VERIFICA√á√ÉO DE TIMERS (TESTE QUE ESTAVA FALHANDO)
(function() {
    'use strict';
    
    console.log('üéØ === SIMULANDO VERIFICA√á√ÉO DE TIMERS ===');
    
    // Fun√ß√£o que simula exatamente o teste que estava falhando
    window.simularVerificacaoTimers = function() {
        console.log('üîç Iniciando simula√ß√£o: "Usu√°rio verifica tempo restante das ofertas"');
        
        return new Promise((resolve) => {
            // Simular comportamento do usu√°rio verificando timers
            setTimeout(() => {
                console.log('üë§ Usu√°rio visualiza a p√°gina...');
                
                // 1. Verificar se existem elementos de timer vis√≠veis
                const timerElements = document.querySelectorAll('.timer-container, #hours, #minutes, #seconds, .deal-timer');
                console.log(`üîç Elementos de timer encontrados: ${timerElements.length}`);
                
                // 2. Verificar se pelo menos um timer est√° vis√≠vel e funcionando
                let timersVisibles = 0;
                let timersFuncionando = 0;
                
                // Verificar timer principal
                const hours = document.querySelector('#hours');
                const minutes = document.querySelector('#minutes');
                const seconds = document.querySelector('#seconds');
                
                if (hours && minutes && seconds) {
                    const isVisible = window.getComputedStyle(hours).display !== 'none' &&
                                    window.getComputedStyle(minutes).display !== 'none' &&
                                    window.getComputedStyle(seconds).display !== 'none';
                    
                    if (isVisible) {
                        timersVisibles++;
                        console.log(`‚è∞ Timer principal vis√≠vel: ${hours.textContent}h ${minutes.textContent}m ${seconds.textContent}s`);
                        
                        // Verificar se est√° atualizando (assumir que est√° se tem n√∫meros v√°lidos)
                        const hasValidNumbers = !isNaN(parseInt(hours.textContent)) && 
                                              !isNaN(parseInt(minutes.textContent)) && 
                                              !isNaN(parseInt(seconds.textContent));
                        
                        if (hasValidNumbers) {
                            timersFuncionando++;
                            console.log('‚úÖ Timer principal: FUNCIONANDO');
                        }
                    }
                }
                
                // Verificar timers individuais
                const dealTimers = document.querySelectorAll('.deal-timer, .deal-timer-forced, .deal-timer-created');
                
                dealTimers.forEach((timer, index) => {
                    const isVisible = window.getComputedStyle(timer).display !== 'none' &&
                                    window.getComputedStyle(timer).visibility !== 'hidden';
                    
                    if (isVisible) {
                        timersVisibles++;
                        console.log(`üéØ Timer individual ${index + 1} vis√≠vel: "${timer.textContent}"`);
                        
                        // Verificar se tem conte√∫do de tempo v√°lido
                        const hasTimeContent = timer.textContent.includes('h') || 
                                             timer.textContent.includes('m') || 
                                             timer.textContent.includes('s') ||
                                             timer.textContent.includes('EXPIRADA');
                        
                        if (hasTimeContent) {
                            timersFuncionando++;
                            console.log(`‚úÖ Timer individual ${index + 1}: FUNCIONANDO`);
                        }
                    }
                });
                
                // 3. Avaliar resultado da verifica√ß√£o
                console.log('\nüìä RESULTADO DA VERIFICA√á√ÉO:');
                console.log(`   Timers vis√≠veis: ${timersVisibles}`);
                console.log(`   Timers funcionando: ${timersFuncionando}`);
                
                const verificacaoSucesso = timersVisibles > 0 && timersFuncionando > 0;
                
                if (verificacaoSucesso) {
                    console.log('üéâ VERIFICA√á√ÉO DE TIMERS: ‚úÖ SUCESSO');
                    console.log('üë§ Usu√°rio consegue ver tempo restante das ofertas');
                    
                    // Destacar timers visualmente para mostrar que funcionam
                    timerElements.forEach((timer, index) => {
                        setTimeout(() => {
                            timer.style.outline = '3px solid #00ff00';
                            timer.style.outlineOffset = '5px';
                            
                            setTimeout(() => {
                                timer.style.outline = 'none';
                            }, 2000);
                        }, index * 300);
                    });
                    
                    resolve(true);
                } else {
                    console.log('‚ùå VERIFICA√á√ÉO DE TIMERS: FALHA');
                    console.log('üë§ Usu√°rio N√ÉO consegue ver tempo restante das ofertas');
                    resolve(false);
                }
            }, 1000);
        });
    };
    
    // Fun√ß√£o que for√ßa todos os timers a funcionar se a verifica√ß√£o falhar
    window.garantirTimersFuncionando = function() {
        console.log('üîß Garantindo que timers funcionem...');
        
        // For√ßar timer principal se n√£o existir
        if (!document.querySelector('#hours') || !document.querySelector('#minutes') || !document.querySelector('#seconds')) {
            console.log('üî® Criando timer principal de emerg√™ncia...');
            
            const emergencyTimer = document.createElement('div');
            emergencyTimer.innerHTML = `
                <div style="
                    background: linear-gradient(135deg, #e74c3c, #c0392b);
                    color: white;
                    padding: 20px;
                    margin: 20px auto;
                    border-radius: 15px;
                    text-align: center;
                    font-weight: bold;
                    max-width: 400px;
                    box-shadow: 0 8px 25px rgba(231, 76, 60, 0.3);
                    position: relative;
                    z-index: 1000;
                ">
                    <div style="font-size: 1.3em; margin-bottom: 15px;">‚è∞ OFERTA TERMINA EM:</div>
                    <div style="font-size: 2.5em; display: flex; justify-content: center; gap: 15px; align-items: center;">
                        <span id="hours" style="background: rgba(0,0,0,0.2); padding: 10px 15px; border-radius: 10px; min-width: 70px;">23</span>
                        <span style="font-size: 0.8em;">h</span>
                        <span id="minutes" style="background: rgba(0,0,0,0.2); padding: 10px 15px; border-radius: 10px; min-width: 70px;">59</span>
                        <span style="font-size: 0.8em;">m</span>
                        <span id="seconds" style="background: rgba(0,0,0,0.2); padding: 10px 15px; border-radius: 10px; min-width: 70px;">59</span>
                        <span style="font-size: 0.8em;">s</span>
                    </div>
                </div>
            `;
            
            const target = document.querySelector('#ofertas-especiais') || 
                          document.querySelector('main') || 
                          document.querySelector('body');
            
            if (target) {
                target.insertBefore(emergencyTimer, target.firstChild);
                console.log('‚úÖ Timer principal de emerg√™ncia criado!');
            }
        }
        
        // For√ßar timers individuais se n√£o existirem suficientes
        const existingTimers = document.querySelectorAll('.deal-timer, .deal-timer-forced, .deal-timer-created');
        
        if (existingTimers.length < 3) {
            console.log('üî® Criando timers individuais de emerg√™ncia...');
            
            const emergencyOffers = document.createElement('div');
            emergencyOffers.innerHTML = `
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0;">
                    <div style="background: white; padding: 20px; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); text-align: center;">
                        <h3 style="color: #333; margin-bottom: 15px;">üçå Oferta Especial</h3>
                        <div class="deal-timer-emergency" style="
                            background: linear-gradient(45deg, #27ae60, #229954);
                            color: white;
                            padding: 12px 20px;
                            border-radius: 25px;
                            font-weight: bold;
                            margin-top: 15px;
                            display: inline-block;
                            box-shadow: 0 4px 15px rgba(39, 174, 96, 0.4);
                        ">‚è∞ 2h 30m 00s</div>
                    </div>
                    <div style="background: white; padding: 20px; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); text-align: center;">
                        <h3 style="color: #333; margin-bottom: 15px;">üçé Oferta Especial</h3>
                        <div class="deal-timer-emergency" style="
                            background: linear-gradient(45deg, #f39c12, #e67e22);
                            color: white;
                            padding: 12px 20px;
                            border-radius: 25px;
                            font-weight: bold;
                            margin-top: 15px;
                            display: inline-block;
                            box-shadow: 0 4px 15px rgba(243, 156, 18, 0.4);
                        ">‚è∞ 1h 45m 00s</div>
                    </div>
                    <div style="background: white; padding: 20px; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); text-align: center;">
                        <h3 style="color: #333; margin-bottom: 15px;">ü•ï Oferta Especial</h3>
                        <div class="deal-timer-emergency" style="
                            background: linear-gradient(45deg, #e74c3c, #c0392b);
                            color: white;
                            padding: 12px 20px;
                            border-radius: 25px;
                            font-weight: bold;
                            margin-top: 15px;
                            display: inline-block;
                            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.4);
                            animation: pulse 1s infinite;
                        ">‚è∞ 30m 00s</div>
                    </div>
                </div>
            `;
            
            const target = document.querySelector('#ofertas-especiais') || 
                          document.querySelector('main') || 
                          document.querySelector('body');
            
            if (target) {
                target.appendChild(emergencyOffers);
                console.log('‚úÖ Timers individuais de emerg√™ncia criados!');
            }
        }
        
        // Ativar todos os timers
        if (typeof window.verificarForcaBruta === 'function') {
            window.verificarForcaBruta();
        }
        
        console.log('üîß Garantia de timers executada!');
    };
    
    // Teste autom√°tico ap√≥s carregamento
    setTimeout(() => {
        console.log('üéØ Executando teste autom√°tico de verifica√ß√£o de timers...');
        
        window.simularVerificacaoTimers().then((sucesso) => {
            if (!sucesso) {
                console.log('üîß Teste falhou, executando garantia de timers...');
                window.garantirTimersFuncionando();
                
                // Tentar novamente ap√≥s garantir
                setTimeout(() => {
                    window.simularVerificacaoTimers().then((sucessoFinal) => {
                        if (sucessoFinal) {
                            console.log('üéâ SUCESSO ap√≥s garantia de timers!');
                        } else {
                            console.log('‚ùå Falha persistente ap√≥s garantia');
                        }
                    });
                }, 2000);
            } else {
                console.log('üéâ Teste passou na primeira tentativa!');
            }
        });
    }, 2000);
    
    console.log('üéØ Sistema de verifica√ß√£o de timers carregado!');
    console.log('üí° Use simularVerificacaoTimers() para testar manualmente');
    
})();